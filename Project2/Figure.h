#pragma once

class Field;

//Абстрактный класс фигуры
class Figure
{
public:
    //Ссылка на игровое поле
    //По умолчанию запишу внее нулевой указатель
    class Field* _field = nullptr;

    //Тип фигуры
    int FigureType;

    //Цвет фигуры
    int FigureColor;
    
    //Этот метод общий для нескольких фигур, поэтому он в родительском классе
    //метод для проверки каждой ячейки на отмечание ее как доступной для хода
    //возвращает нужно ли выделять дальше
    //вариант атаки или защиты определен параметром attack
    //Разница в поведении - при варианте атаки включаются свои фигуры
    bool CheckCell(int i, int j, bool attack = false);

    //это виртуальный метод, его обязательно нужно переопределить в потомке - у каждой фигуры-потомка
    // для каждой фигуры такой метод будет отмечать разные поля
    //Этот метод отмечает все поля на поле, куда может ходить эта фигура
    //Принимает координаты фигуры
    virtual void FillMovesMap(int i,int j) = 0;

    //Считает карту атак фигуры
    //Заполняет все поля массива Moves на которые следующим ходом может атаковать фигура
    //Этот метод нужен только чтобы определить возможные ходы короля
    virtual void FillAttackMap(int i, int j);
    
    //Получает все ходы, предварительно очистив ходы, записанные на доске
    virtual void FillMovesMapWithClear(int i, int j);

    //Возвращает обратный цвет
    static int InverseColor(int Color);

};

//Тип фигуры
//Значение типа фигуры - это ее ценность для вычисления позиции на доске
enum FigureTypes
{
    king = 9000,//король
    queen = 90,//ферзь
    bishop = 35,//слон
    knight = 30,//конь
    rock = 50,//ладья
    pawn = 10//пешка
};

//Цвет фигуры
enum FigureColors
{
    black,
    white 
};

